Step 01
- Create constant numbers
--- Mode indicator
--- Character count indicator

Step 02
- Edit enums.py
--- Add attribute to convert to int
- Add BitBuffer class
- Try to encode Alphanumeric

Step 03
- Calculate maximum capacity and fill data

Step 04
- Log Antilog table
- GF(256) Polynomial
--- Multiplication
--- Polynomial long division

Step 05
- Structure Final Message
--- One block codeword
--- Many blocks
----- Interleave data & error correction codewords
- Reconstruct BitBuffer class
- Reconstruct RSBlock class
- Add remainder bit constants

Step 06
- Create QR Module
--- Add Finder Patterns
--- Add Separators
--- Add Alignment Patterns
--- Add Timing Patterns
--- Add Dark Module
--- Reserve Format & Version Information Area
--- Data Placement
- Change structFinalMsg() parameter from list of BitBuffers to one-BitBuffer

Step 07
- Remove reserve area & insert masked Format/Version information
- Calculate penalty score for 4 conditions
- Mask data
- Find best mask & create the best one
- Change RS_BLOCK_TABLE for easy to copy and paste from site
- Create QR Code

Step 08
- Optimize penalty score calculation
- Find best fit version
- Reconstruct project file & function definition & etc.
- Using multiprocessing.Pool for speed test mask patterns